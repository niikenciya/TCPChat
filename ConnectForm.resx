<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAEUMAABFDAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsAAAB+AAAA1AAAAPgAAAD7AAAA4AAAAJUAAAAsAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxAAAAvwAAAPwAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        ANYAAABOAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAANAAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAOcAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQAAADQAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOcAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxAAAA0AAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA6AAAAOIAAAD9AAAA/wAAAP8AAAD/AAAA/wAAAOcAAABUAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGwAAAL8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAMQAAAA2AAAAJAAAAKQAAAD+AAAA/wAAAP8AAAD/AAAA/wAAAOcAAABUAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB+AAAA/AAA
        AP8AAAD/AAAA/wAAAP8AAADEAAAAKQAAAAAAAAAAAAAAFAAAAKMAAAD+AAAA/wAAAP8AAAD/AAAA/wAA
        AOYAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ANMAAAD/AAAA/wAAAP8AAAD/AAAAxQAAACkAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAKMAAAD8AAAA1wAA
        AJgAAAByAAAAZwAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAA9wAAAP8AAAD/AAAA/wAAAOkAAAA2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAA
        AFMAAABIAAAAcgAAAJ4AAACrAAAAmQAAAGAAAAAZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAD6AAAA/wAAAP8AAAD/AAAA4gAAACYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAGAAAAZgAAAN0AAAD+AAAA/wAAAP8AAAD/AAAA/AAAAMsAAABIAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN8AAAD/AAAA/wAAAP8AAAD/AAAApAAAABQAAAAAAAAAAAAA
        AAAAAAAAAAAABwAAAH0AAAD2AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOYAAABUAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlQAAAP8AAAD/AAAA/wAAAP8AAAD+AAAAowAA
        ABQAAAAAAAAAAAAAAAcAAAB9AAAA9wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AOcAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAAA1QAAAP8AAAD/AAAA/wAA
        AP8AAAD+AAAAowAAABQAAAAEAAAAfQAAAPcAAAD/AAAA/wAAAP8AAAD/AAAA/QAAAPgAAAD+AAAA/wAA
        AP8AAAD/AAAA/wAAAOcAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOAAAA5wAA
        AP8AAAD/AAAA/wAAAP8AAAD+AAAAogAAACMAAAC6AAAA/wAAAP8AAAD/AAAA/wAAAPUAAACIAAAARwAA
        AKkAAAD9AAAA/wAAAP8AAAD/AAAA/wAAAOcAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABUAAAA5wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAAoQAAAEEAAADIAAAA/wAAAP8AAAD2AAAAeQAA
        AAYAAAAAAAAAEgAAAKEAAAD+AAAA/wAAAP8AAAD/AAAA/wAAAOcAAABUAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABUAAAA5wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAAoAAAAEAAAADJAAAA9wAA
        AHkAAAAGAAAAAAAAAAgAAABUAAAAPgAAAKAAAAD+AAAA/wAAAP8AAAD/AAAA/wAAAOcAAABUAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAAAA5wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAAoAAA
        AD4AAABUAAAACAAAAAAAAAAGAAAAeQAAAPcAAADJAAAAQAAAAKAAAAD+AAAA/wAAAP8AAAD/AAAA/wAA
        AOcAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAAAA5wAAAP8AAAD/AAAA/wAA
        AP8AAAD+AAAAoQAAABIAAAAAAAAABgAAAHkAAAD2AAAA/wAAAP8AAADIAAAAQQAAAKEAAAD+AAAA/wAA
        AP8AAAD/AAAA/wAAAOcAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAAAA5wAA
        AP8AAAD/AAAA/wAAAP8AAAD9AAAAqQAAAEcAAACIAAAA9QAAAP8AAAD/AAAA/wAAAP8AAAC6AAAAIwAA
        AKIAAAD+AAAA/wAAAP8AAAD/AAAA/wAAAOcAAABOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABUAAAA5wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAA+QAAAP0AAAD/AAAA/wAAAP8AAAD/AAAA9wAA
        AH0AAAAEAAAAFAAAAKMAAAD+AAAA/wAAAP8AAAD/AAAA/wAAANYAAAAsAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABUAAAA5wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        APcAAAB9AAAABwAAAAAAAAAAAAAAFAAAAKMAAAD+AAAA/wAAAP8AAAD/AAAA/wAAAJUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAAAA5gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD2AAAAfQAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAKQAAAD/AAAA/wAAAP8AAAD/AAAA3wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABIAAAAygAAAPwAAAD/AAAA/wAA
        AP8AAAD+AAAA3QAAAGYAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgAAAOIAAAD/AAAA/wAA
        AP8AAAD6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAYAAA
        AJgAAACrAAAAngAAAHEAAABIAAAAVAAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3AAAA6QAA
        AP8AAAD/AAAA/wAAAPcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAJAAAAGgAAAByAAAAmAAAANcAAAD7AAAAowAAABQAAAAAAAAAAAAAAAAAAAAAAAAAKQAA
        AMUAAAD/AAAA/wAAAP8AAAD/AAAA0wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAA8AAAA5gAAAP8AAAD/AAAA/wAAAP8AAAD+AAAAowAAABQAAAAAAAAAAAAA
        ACkAAADEAAAA/wAAAP8AAAD/AAAA/wAAAPwAAAB+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAAAA5wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAApAAA
        ACQAAAA2AAAAxAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAvwAAABsAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAAAA5wAAAP8AAAD/AAAA/wAA
        AP8AAAD9AAAA4gAAAOgAAAD/AAAA/wAAAP8AAAD/AAAA/wAAANAAAAAxAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAAAA5wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADQAAAANAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABUAAAA5wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA0AAAADQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAABOAAAA1wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/AAAAL8AAAAxAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAAAlQAAAOAAAAD7AAAA+AAAANUAAAB+AAAAGwAA
        AAAAAAAAAAAAAAAAAAAAAAAA+Af///AB///gAf//wAD//4AAf/8AAD//AMAf/wHgH/8D8Af/A/AB/wHg
        Af8AwAD/AAAAf4AAAD/AAEAf4ACAD/ABAAf4AgAD/AAAAf4AAAD/AAMA/4AHgP+AD8D/4A/A//gHgP/4
        AwD//AAA//4AAf//AAP//4AH//+AD///4B8=
</value>
  </data>
</root>